<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bevy on TheSeaToad</title>
    <link>https://theseatoad.com/tags/bevy/</link>
    <description>Recent content in Bevy on TheSeaToad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Aug 2022 20:03:00 -0700</lastBuildDate><atom:link href="https://theseatoad.com/tags/bevy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust For Game Development #3 -- Game of Life</title>
      <link>https://theseatoad.com/rustforgamedevelopment3/</link>
      <pubDate>Tue, 30 Aug 2022 20:03:00 -0700</pubDate>
      
      <guid>https://theseatoad.com/rustforgamedevelopment3/</guid>
      <description>Prelude Follow along this tutorial using the cooresponding repository on Github. Snippets here will highlight important structs and methods, but for compiling code, refer to the link above.
This post is highlighing how the game logic and game state can be abstracted away from the rendering of the game. It is a good habit to decouple the code in this manner as it will be easier to iterate on either systems as well as writing tests.</description>
    </item>
    
  </channel>
</rss>
